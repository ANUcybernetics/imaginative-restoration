import type { Fn, Fn3, Nullable, Pair } from "@thi.ng/api";
import type { ReadonlyVec } from "@thi.ng/vectors";
/** @internal */
export declare const CMP: (a: [number, any?], b: [number, any?]) => number;
/** @internal */
export declare const __addResults: <A, B>(fn: Fn<A, B>, sel: [number, Nullable<A>?][], acc: B[]) => B[];
/**
 * Shared `into()` impl for spatial map types.
 *
 * @param map -
 * @param pairs -
 * @param eps -
 *
 * @internal
 */
export declare const __into: <K, V>(map: {
    set: Fn3<K, V, number, boolean>;
}, pairs: Iterable<Pair<K, V>>, eps: number) => boolean;
/** @internal */
export declare const __ensureRes: (res: ReadonlyVec, min?: number) => void;
//# sourceMappingURL=utils.d.ts.map